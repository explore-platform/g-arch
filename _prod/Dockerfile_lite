# =============================================
# -- PHASE 1 :  build typescript projects
# =============================================
FROM node:18.12.1 as buildstage

# -----------------------
# VISUALISER
# -----------------------
WORKDIR /visualiser
COPY ./visualiser/ .
RUN npm i
RUN export VITE_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S) && npm run build


# =============================================
# -- PHASE 2 :  copy build then run 
#               all apps to serve in ubuntu 
#               for all in one docker
# =============================================
# FROM alpine:3.18.2
FROM node:18.16.1-alpine3.18

RUN apk update
RUN apk add --no-cache openjdk11 nginx python3
RUN apk add --no-cache musl-dev gcc g++ gfortran python3-dev openblas-dev
RUN ln -sf python3 /usr/bin/python
RUN python3 -m ensurepip
RUN pip3 install --no-cache --upgrade pip setuptools

WORKDIR /sda

# -----------------------
# VISUALISER
# -----------------------
COPY --from=buildstage /visualiser/build/ /usr/share/nginx/html

# -----------------------
# API
# -----------------------
# Build API 
WORKDIR /sda/api
COPY ./api/ .
RUN npm i
RUN npm run build

# -----------------------
# SCIENCE
# -----------------------
WORKDIR /sda/
COPY science/ ./science

# -----------------------
# SCIENCE API
# -----------------------
WORKDIR /sda/science-api

RUN python --version
RUN python -m pip --version

COPY ./science-api/requirements.txt  ./requirements.txt
RUN pip3 install -r ./requirements.txt

COPY ./science-api/ .

# Remove all libs used for the download
RUN apk del --no-cache musl-dev gcc g++ gfortran python3-dev openblas-dev


# -----------------------
# NGINX
# -----------------------
WORKDIR /sda/

COPY ./_prod/nginx.conf /etc/nginx/nginx.conf
COPY ./_prod/default.conf /etc/nginx/conf.d/default.conf


# -----------------------
# ENTRYPOINT
# -----------------------
COPY entrypoint_lite.sh ./entrypoint.sh
ENTRYPOINT '/sda/entrypoint.sh'
